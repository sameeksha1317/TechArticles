##  What does Search Algorithm mean?

A Search Algorithm is the step-by-step procedure used to retrieve specific data among a dataset. It is considered as fundamental procedure in computing.

All search algorithms make use of a search key in order to proceed with the procedure. Search algorithms are expected to return a success or a failure status, usually denoted by Boolean true/false. Different search algorithms are available, and the performance and efficiency of the same depend on the data and on the manner in which they are used.

Search cases in search algorithms can be categorized as best case, average case and worst case. In some algorithms, all the three cases might be asymptotically the same, whereas in some others there could be a large difference. The average behavior of the search algorithm helps in determining the usefulness of it. In computer science, when it comes to searching for data, the difference between a fast application and a slower one often lies in the use of the proper search algorithm.

 More often than not, this search operation determines the responsiveness of the application for the end-user.


### Some of its types are
1.Linear Search
2.Binary Search

### Linear Search

**Explanation**
The linear search is the algorithm of choice for short lists, because it is quite simple and has minimal code to implement. The linear search algorithm looks at the first list item and matches it with the target element, if it get matched then it returns the current index and if it's not, it looks at the next item and on through each and every entry in the list.

So,in brief we can say that It sequentially checks each element of the list until either a match is found or the whole list has been searched.

It is the most basic search algorithm used in data structures and is also called as sequential search.

![image](https://i.ibb.co/QbjLw4s/linear-search.png)


**Implementation**
The following program returns the index at which the target item is being found, if the item is present in the array. Otherwise, it returns -1;
```
 public static int linearSearch(int[] arr, int item) {
        //loop for iterating the array until we get the target element
	    for(int i=0; i<=arr.length-1; i++) {
		       if(arr[i]==item) {
                       //returns the current index    
			           return i;
		        }
         //if the element is absent in the array
         return -1;
	}
}
```

Calling the function "linearSearch" and later the function "print"
```
int[] arr={7,4,9,2,3};
int index= linearSearch(arr,3);
print(3, index);
``` 

Function "print" to print the required index
``` 
public static void print(int elementToBeSearched, int index){
if(index == -1){  
      System.out.println( elementToBeSearched +" has not been found.");
}else{
     System.out.println( elementToBeSearched +" has been found at "+ index+"th index.");
     }
}
```

Output will be:
```
3 has been found at 4th index.
```
![image](https://i.ibb.co/wr4rXK9/linear-search-d.gif)


**Time Complexity**
Here we are iterating through the entire set of N elements sequentially to get the location of the element being searched. In worst case, it can may present at the last position or not present in the array at all.
So,in such cases we will have to iterate N times and thus, linear search algorithm takes O(N) operations.


**Space Complexity**
This type of search requires only a single unit of memory to store the element being searched. This is not relevant to the size of the input array. So, the space complexity of Linear Search is O(1) .


### Binary Search

**Explanation**
Binary Search is one of the most fundamental and useful algorithm in Computer Science.It describes the process of searching for a specific value in an ordered collection.

This kind of search uses the Divide and Conquer methodology and requires the data set to be sorted beforehand.

It splits the input collection into two equal halves, and with each iteration compares the target element with the mid element of given array.
If the element got matched, the search ends its procedure. Else if it finds the target element to be greater than the middle one, the search get continued with the upper half of the array and if it finds target number as smaller than the mid value, the search get continued with the lower half of the array. It keeps repeating this process again and again, breaking the array in half each time until it finds the target element. 

It whole procedures can be summarized as:
Pre-processing — Sort the given collection, if it is unsorted.
Binary Search — By using a loop or recursion divides the array until either it gets its target element or get iterated over whole collection.
Post-processing — Determine viable candidates in the remaining space.

![image](https://i.ibb.co/c8Z77V2/binary-search.png)


**Implementation**
The following program returns the index at which the target item is being found, if the item is present in the array. Otherwise, it returns -1;

```
public static int binarySearch(int[] arr, int item) {
	int low =0;
	int high =arr.length-1;
	while( low <= high) {
		int mid =( low + high)/2;
		if(item> arr[mid]) {
			low =mid+1;
		}else if(item< arr[mid]) {
			high =mid- 1;
		}else {
			return mid;
		}
	}
	return -1;
}
```

Calling the function "binarySearch" and later the function "print"
```
int[] arr = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};
int index = binarySearch(arr, 23);
print( 23 , index);
```

Function "print" to print the required index
```
public static void print( elementToBeSearched , index){
if(index == -1){
      System.out.println( elementToBeSearched+"has not been found ");
}else{
      System.out.println( elementToBeSearched +" has been found at "+index+"th index." );
     }
}
```

Output will be like:
```
23 has been found at 5th index.
```

**Time complexity**
The idea of binary search is to use the information that the array is sorted. it divides the array into half each time and reduce the time complexity to O(Log n).

**Space Complexity**
The space complexity of binary search is O (1) since we only need space to keep track of the upper and lower bounds of the current search space. Note that no recursion is required; the search is entirely iterative.
