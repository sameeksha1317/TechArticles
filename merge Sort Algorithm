
# Merge Sort Algorithm


## Explanation

Merge Sort is a kind of Divide and Conquer algorithm in computer programming and is pretty trivial to apply.
It is based on slicing recursively the input list into two comparable size lists until it can no longer be divided into more entities, then combining the recursively two sorted pieces back together as one. By definition, if there is just one item in the list, the algorithm stops separating it further and starts integrating it back.

![image](https://i.ibb.co/WDCmfxx/merge-sort3.png)

**The Merge Sorting process includes three parts:**

*i).* Dividing the set into several smaller sub-problems of similar length.
*ii).* Conquering the sub-problems by continually resolving them. Resolve the sub-problems as simple cases if they are small enough.
*iii).* Combine the sub-problem alternatives to get the initial set solution.


**How it exactly works?**

To understand merge sort, we take an unsorted array like the following −
 4, 2, 9, 7, 8, 5, 1, 3

We know that the merge sort divides the whole array iteratively into equal halves unless the atomic values are achieved. We can see here that an array of 8 items is getting divided into two sub-arrays.  Both are of size 4.

This does not change the sequence of the appearance of items if they are merged back to the original. Now again we divide these two arrays into equal halves and we get a number of the paired values.

We further divide these pairs and we achieve atomic value which can no more be divided.

Now, we combine them in the same manner as they were split down after sorting it. 

We first compare the element with their pair for each list and then combine them in a sorted manner. We have seen that 4 and 2, have to be reshuffle as 2 and 4 to merge as a sorted list. Similarly, we have to check out 9 and 7, 8, and 5, and the last 1 and 3.We will do a comparison, shuffle them if required, and merge them to get the sorted list.

In the next iteration of the combining phase, we compare lists of two data values and merge them into a list of found data values placing all in sorted order.

After the final merging, the list should look like this −

1, 2, 3, 4, 5, 7, 8, 9

![image](https://i.ibb.co/8mpzWr0/merge-sort2.png)


## Implementation

The following program returns the input array "arr" in the sorted format:

```

 public static int[] merge(int[] one, int[] two) {
		  int[] sorted = new int[one.length+two.length];
		  int i=0;
		  int j=0;
		  int k=0;
		  while(i<one.length && j<two.length) {
			  if(one[i] < two[j]) {
				  sorted[k] = one[i];
				  k++;
				  i++;
			  }else {
				  sorted[k] = two[j];
				  k++;
				  j++;
			  }
		  }
		  if(i == one.length) {
			  while(j < two.length) {
				  sorted[k] = two[j];
				  k++;
				  j++;
			  }
		  }
		  if(j == two.length) {
			  while(i < one.length) {
				  sorted[k] = one[i];
				  k++;
				  i++;
			  }
		  }
		  return sorted;
	  }
	  public static int[] mergeSort(int[] arr, int lo, int hi) {
		 if(lo==hi) {
			  int[] br = new int[1];
			  br[0] = arr[lo];
			  return br;
		 }
		 int mid = (lo+hi)/2;
                 //calling recursively the mergeSort function for first half split
                 int[] firstHalf = mergeSort(arr, lo, mid); 

                 //calling recursively the mergeSort function for second half split
		 int[] secondHalf = mergeSort(arr, mid+1, hi);

                 //calling merge function to merge the two parts		  
                 int[] sortedArray = merge(firstHalf, secondHalf);

                 //returning the sorted array
		  return sortedArray;
	  }

```

Calling the function 'mergeSort' and later the function "print":

```

          int[] arr= {4, 2, 9, 7, 8, 5, 1, 3};
		  int[] ans= mergeSort(arr, 0, arr.length-1);
		  print(ans);

```

Function "print" to print the Sorted Array:
```

  public static void print(int[] answer){
		    for(int i=0 ; i<answer.length ; i++){
		          System.out.print(answer[i]+" ");
		     }
		}

```

The output will be like:
```
1 2 3 4 5 7 8 9

```


## Time Complexity

As merge sort always divides the array into two halves and takes linear time to merge them. The list of size N items gets split into a max of logN parts and takes O(N) time to merge all the sublists, it's time complexity has a reasonably proficient space-time complexity and remains the same in all the 3 cases (worst, average and best). These are the following:

*i).* Worst Case Time Complexity [ Big-O ]: O(n*log n)

*ii).* Best Case Time Complexity [Big-omega]: O(n*log n)

*iii).* Average Time Complexity [Big-theta]: O(n*log n)


## Space Complexity

As it requires an equal amount of additional space as the unsorted array, So its space complexity is O(N). Hence it's not at all recommended for searching large unsorted arrays.
But, it is the best Sorting technique used for sorting Linked Lists.


    
