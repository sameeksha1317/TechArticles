#Sort Algorithm

A Sorting Algorithm is an algorithm that puts elements of an array in a certain order. The most frequently used orders are numerical order and lexicographical order.
There are many sorting algorithm for this purpose and we are going to disscuss about one of them.

# Insertion Sort
 
## Explanation

Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) by proceduring one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort, and that's why it is applied in practice for sorting small arrays of data. However, insertion sort provides several advantages:
*i*. It is one of the easiest and brute force sorting algorithm.
*ii*. It can be used to sort elements in either ascending or descending order.

In Insertion sort, as it is in-place comparison-based sorting algorithm, the array get virtually splitted into a lower and an upper part. Here,  the lower part of an array as a sub-list is maintained which is always sorted. An element which is to be inserted in this sorted sub-list, are picked from the upper unsorted half, find its appropriate place and then get inserted at the correct position in the sorted part.
And from there, this algorithm got the name as Insertion sort.

In simple words, we can brief its working as, it is just like playing cards i.e, picking one card from the collection and sorting it with the cards that we have in our hand already.
With every iteration, one card is moved from the unsorted section to the sorted section.
This process is continued until all cards in the unsorted part would get exhausted. 


**Let's by the use of following array, we just illustrate the Insertion sort algorithm:**

So, this is our given unsorted array.

8, 5, 4, 10, 9

We start sorting the array from the first index that is from 5. We keep that value in a separate variable, let that variable be "current", for safe-keeping. 5 is less than 8. We move 8 one place to the right, effectively overwriting the 5 that was previously stored there (hence the separate variable for safe keeping):

8, 8, 4, 10, 9 (current = 5)

5 is lesser than all the elements in our sorted subarray, so we insert it in to the first position.

5, 8, 4, 10, 9

Next we go for the next number of the unsorted array that is  4. We save that value in the variable "current". As 4 is less than 8 so we move 8 to the right, and do the same with 5.

5, 5, 8, 10, 9 (current = 4)

Again we've encountered an element lesser than our entire sorted subarray, so we put it in the first position.

4, 5, 8, 10, 9

Now stepping to 10,as it is greater than our all rightmost every element in the sorted subarray and is therefore larger than any of the elements to the left of 8. So we simply move on to the next element.

4, 5, 8, 10, 9

As, 9 is less than 10, so we move 10 to the right, keeping 9 in our current variable.

4, 5, 8, 10, 10 (current = 9)

However, 9 is greater than 8. So we simply insert 9 right after 8.

4, 5, 8, 9, 10

 ![image](https://i.ibb.co/JyjXHYY/insertionsort-2.jpg)


## Implementation
The following program returns the array "arr" in the sorted format:

``` 
public static int[] insertionSort(int[] arr){
     for(int index=1; index <= arr.length()-1; index++){
          int current =arr[index];
          int i=index-1;
              while(i .=0 && arr[i] >current){
                      arr[i+1] = arr[i];
                      i--;
              }
          arr[i+1] = current;
      }
  return arr;
} 

```
Calling the function 'insertionSort' and later the function "print":
```
int[] arr ={8, 5, 4, 10, 9};
int[] answer = insertionSort(int[] arr);
print(int[] answer);
```
Function "print" to print the Sorted Array:
```
public static void print(int[] answer){
    for(int i=0 ; i<answer.length() ; i++){
          System.out.print(answer[i]+" ");
     }
}

```
Output will be like:
```
4 5 8 9 10
```


## Time Complexity

This algorithm is not suitable for large data sets as its average and worst case complexity are of ÎŸ(n2), where n is the number of items.
In the worst-case scenario, n will pick all elements and then n shifts to set it to the right position
In the best-case scenario, that is a sorted array, we will just pick the elements, but no shifting will take place leading it to n time complexity, that is, every element is traversed at least once.
So,in short we can say that,
*i*. Best Time Complexity: O(n)
*ii*. Average Time Complexity: O(n^2)
*iii*. Worst Time Complexity: O(n^2)



## Space Complexity

Insertion sort is an in-place algorithm.
As, it performs all it's computation in the original array and hence no other array is used. So, the space complexity works out to be O(1).

    
