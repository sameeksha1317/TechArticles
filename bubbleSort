
## Bubble Sort Algorithm

### Explanation

Bubble Sort is a simple sorting algorithm that is used to sort a given set of elements provided as an array.
This sorting algorithm is a completely comparison-based algorithm in which each pair of adjacent elements from the first index is compared and the elements are swapped if they are not indented correctly.

Like Insertion Sort, Bubble Sort also consists of a simple double "for" loop. The inner "for" loop iterate through the whole array starting from the left, compare one by one all of the neighboring values. If the left value is found to be greater than the right one, then these two items get swapped. This iteration continues until the last element gets checked and swapped if required. By the completion of every iteration, the largest value amidst all the elements of the unsorted array is encountered, cause it to "bubble" up to the rightest of the array. However, in the further pass, there is no need to compare from the rightmost element of the last iteration because it is known that the largest value had been already reached to the rightest of the array. Likewise, in each succeeding pass through the array, one element got decrement for comparison.

![img](https://i.ibb.co/09999vx/bubble-sort.gif)

If the given array has to be sorted in ascending order, then bubble sort will start by comparing the first element of the array with the second element, if the first element is greater than the second element, it will swap both the elements, and then move on to compare the second and the third element, and so on. If we have total n elements, then we will repeat this process for n-1 times. Let's see how it works.

![img](https://i.ibb.co/Y88WBP5/bubble-short.png)

**For the first iteration:**

As the above array is an unsorted one. We start with the very first two elements, comparing them to check which one is greater.

In this comparison we find the value 5 to be the greater than the value 1, so it will get swapped. Next of it, we compare 5 with 4 which leads to swapping again.

Now, going further we find 2 to be smaller than 5 and get these values swapped.

And lastly after doing a comparison between 5 and 8, as it already is in increasing order we end our first iteration.

The new array will look like-
1 4 5 2 8

**For the second iteration:**
 
Again the loop will start from the very first index, doing a comparison between 1 and 4.

There is no need for swapping this time as both items are aligned in ascending order already.

Next, we compare 4 and 2, results in swapping between both items.

Then we will compare 4 and 5 doing no swapping and ending our second iteration.

**For the third iteration:**

Again the loop will start its third iteration, iterating from the first index.

We compare the first two numbers and find them assorted.
 
Stepping further we again get the next pair of elements in increasing order that is 2 and 4.

Further checking all the rest pairs we found all to be in a sorted format. And hence there is no more need to iterate again.

Notice that after each iteration, at least one value moves at the end.

And when there's no swap required, bubble sorts learns that an array is completely sorted.

We have seen that with every complete iteration the largest element of the iterating sub-array, bubbles up towards the last place or the highest index of the sorted part, just like a water bubble rises to the water surface, so we can say that its procedure justifies its name i.e, **Bubble Sort**.

The main advantage of Bubble Sort is the simplicity of this algorithm. But also this algorithm is not suitable for large data sets due to its bad average and worst-case complexity. 


### Implementation

The following program returns the array "arr" in the sorted format:
```
public static int[] bubbleSort(int[] arr){
       for(int counter = 0; counter < arr.length -1; counter++){
             for(int j =0 ; j< arr.length-1-counter ; j++){
                  if(arr[j] > arr[j+1]){
                         int temp = arr[j];
                         arr[j] = arr[j+1];
                         arr[j+1] = temp;
                  }
             }
       }
    return arr;
}
```
Calling the function 'bubbleSort' and later the function "print":
```
int[] arr = {5, 1, 4, 2, 8};
int[] answer = bubbleSort(arr);
print(answer);
```
Function "print" to print the Sorted Array:
```
public static void print(int[] answer){
    for(int i=0 ; i<answer.length ; i++){
          System.out.print(answer[i]+" ");
     }
}
